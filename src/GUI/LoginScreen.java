/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import SystemObjects.Prescription;
import SystemObjects.Medicine;
import SystemObjects.Appointment;
import SystemObjects.DoctorFeedback;
import SystemObjects.AppointmentRequest;
import DataHandler.DataHandler;
import Misc.MessagerHandler;
import SystemObjects.AccountCreationRequest;
import SystemObjects.AccountDeletionRequest;
import SystemObjects.MedicineOrderRequest;
import SystemObjects.Message;
import Users.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Tom
 */
public class LoginScreen extends javax.swing.JFrame {

    /**
     * Creates new form Login
     */
    public LoginScreen() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnLogin = new javax.swing.JButton();
        txtUserName = new javax.swing.JTextField();
        txtPassword = new javax.swing.JTextField();
        btnCreateNewAccount = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnLogin.setText("Login");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        txtUserName.setText("patient2");
        txtUserName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUserNameActionPerformed(evt);
            }
        });

        txtPassword.setText("password");

        btnCreateNewAccount.setText("Create New Account");
        btnCreateNewAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateNewAccountActionPerformed(evt);
            }
        });

        jLabel1.setText("Log In:");

        jLabel2.setText("Username:");

        jLabel3.setText("Password:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(116, 116, 116)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnLogin)
                                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(142, 142, 142)
                        .addComponent(btnCreateNewAccount)))
                .addContainerGap(190, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(102, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addComponent(btnLogin)
                .addGap(18, 18, 18)
                .addComponent(btnCreateNewAccount)
                .addGap(64, 64, 64))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openUserScreen(IUser user) throws IOException {

        String classType = user.getClassType();

        switch (classType) {
            case ("Administrator"):
                new AdminScreen().setVisible(true);
                break;
            case ("Doctor"):
                new DoctorScreen((Doctor) user).setVisible(true);
                break;
            case ("Patient"):
                new PatientScreen((Patient) user).setVisible(true);
                break;
            case ("Secretary"):
                new SecretaryScreen((Secretary) user).setVisible(true);
                break;
        }
    }

    private IUser checkCredentials(String userName, String password) throws IOException {
        ArrayList dataArray = DataHandler.readUserData();

        for (int i = 0; i < 4; i++) {
            ArrayList<IUser> users = (ArrayList<IUser>) dataArray.get(i);

            for (int x = 0; x < users.size(); x++) {
                IUser user = users.get(x);

                if (user.getUserName().equals(userName) && user.getPassword().equals(password)) {

                    return user;
                }
            }
        }
        return null;
    }

    private void txtUserNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUserNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUserNameActionPerformed

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        // TODO add your handling code here:
        String username = txtUserName.getText();
        String password = txtPassword.getText();

        try {

            IUser user = checkCredentials(username, password);
            if (user.equals(null)) {
                //display error message
            } else {
                setVisible(false);
                openUserScreen(user);
            }
        } catch (IOException ex) {
            Logger.getLogger(LoginScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnLoginActionPerformed

    private void btnCreateNewAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateNewAccountActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        new CreatePatientAccountRequestScreen().setVisible(true);
    }//GEN-LAST:event_btnCreateNewAccountActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoginScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoginScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoginScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoginScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //TEST STUFF
        String id = "0001";
        String name = "Jim";
        String address = "Jims house";
        String password = "password";

        AccountCreationRequest accountCreationRequest = new AccountCreationRequest("AC1", "testName", "testAddress", "username", "password", 99, "male");
        AccountDeletionRequest accountDeletionRequest = new AccountDeletionRequest("AD2", "P6");
        Appointment appointment = new Appointment("Ap3", "D2", "P6", "status: cancelled", "notes", "01/01/2000");
        AppointmentRequest appointmentRequest = new AppointmentRequest("ar4", "D2", "P6", "02/02/2000", false);
        DoctorFeedback docFeedback = new DoctorFeedback("DF5", "D2", "feedback title", "feedback details", 0);
        Medicine medicine = new Medicine("Me6", "paracetemol", 0);
        Prescription prescription = new Prescription("Pr7", "D2", "P6", "notes: fuck this", medicine, 100, 100);

        MedicineOrderRequest orderRequest = new MedicineOrderRequest("MR8", medicine, 100);

        Message testMessage = new Message("MS99", "TEST", "P6", "TEST TITLE", "TEST BODY");

        //patient stuff
        //ArrayList futureAppointments = new ArrayList();
        ArrayList appointmentHistory = new ArrayList();
        ArrayList prescriptions = new ArrayList();
        //fill patient array stuff
        appointmentHistory.add(appointment);
        prescriptions.add(prescription);

        //secretary stuff
        ArrayList appointmentRequests = new ArrayList();
        ArrayList accountCreationRequests = new ArrayList();
        ArrayList accountDeletionRequests = new ArrayList();
        ArrayList medicineOrderRequests = new ArrayList();

        //filling secretary arrays
        appointmentRequests.add(appointmentRequest);
        accountCreationRequests.add(accountCreationRequest);
        accountDeletionRequests.add(accountDeletionRequest);
        medicineOrderRequests.add(orderRequest);

        //doctor stuff
        ArrayList feedback = new ArrayList();
        ArrayList futureAppointments = new ArrayList();
        ArrayList pastAppointments = new ArrayList();

        ArrayList messages = new ArrayList();

        //fill doctor arrays
        feedback.add(docFeedback);
        futureAppointments.add(appointment);
        pastAppointments.add(appointment);

        messages.add(testMessage);

        //initialise user mock objects
        Administrator admin = new Administrator("A1", name, address, "admin1", password);
        Administrator adminB = new Administrator("A2", name, address, "admin2", password);
        Doctor doctor = new Doctor("D2", name, address, "doctor1", password, feedback, futureAppointments, pastAppointments, messages);
        Doctor doctorB = new Doctor("D4", name, address, "doctor2", password, feedback, futureAppointments, pastAppointments, messages);
        Patient patient = new Patient("P5", "patient p5", address, "patient1", password, "Male", 10, futureAppointments, appointmentHistory, prescriptions, messages);
        Patient patientB = new Patient("P6", "patient p6", address, "patient2", password, "Male", 10, futureAppointments, appointmentHistory, prescriptions, messages);
        Secretary secretary = new Secretary("S7", name, address, "secretary1", password, appointmentRequests, accountCreationRequests, accountDeletionRequests, medicineOrderRequests, messages);
        Secretary secretaryB = new Secretary("S8", name, address, "secretary2", password, appointmentRequests, accountCreationRequests, accountDeletionRequests, medicineOrderRequests, messages);

        //data write stuff
        ArrayList<Administrator> administratorArray = new ArrayList();
        ArrayList<Doctor> doctorArray = new ArrayList();
        ArrayList<Patient> patientArray = new ArrayList();
        ArrayList<Secretary> secretaryArray = new ArrayList();
        ArrayList<Medicine> medicineArray = new ArrayList();

        administratorArray.add(admin);
        administratorArray.add(adminB);

        doctorArray.add(doctor);
        doctorArray.add(doctorB);

        patientArray.add(patient);
        patientArray.add(patientB);

        secretaryArray.add(secretary);
        secretaryArray.add(secretaryB);

        medicineArray.add(medicine);
        medicineArray.add(medicine);

        //classes array stuff
        ArrayList classesArray = new ArrayList();
        classesArray.add(administratorArray);
        classesArray.add(doctorArray);
        classesArray.add(patientArray);
        classesArray.add(secretaryArray);
        classesArray.add(medicineArray);

        System.out.println("PROGRAM START");

        System.out.println("write data");
        DataHandler.writeUserData(classesArray);

        System.out.println("read data");
        ArrayList dataArray = DataHandler.readUserData();

        System.out.println("write data");
        DataHandler.writeUserData(dataArray);

        System.out.println("read data");
        ArrayList test2 = DataHandler.readUserData();

        ArrayList<Administrator> adminTestArrayList = (ArrayList<Administrator>) dataArray.get(0);
        ArrayList<Doctor> doctorTestArrayList = (ArrayList<Doctor>) dataArray.get(1);
        ArrayList<Patient> patientTestArrayList = (ArrayList<Patient>) dataArray.get(2);
        ArrayList<Secretary> secretaryTestArrayList = (ArrayList<Secretary>) dataArray.get(3);

        MessagerHandler.registerNewObservers();

        Administrator testAdmin = adminTestArrayList.get(0);
        Doctor testDoctor = doctorTestArrayList.get(0);
        Patient testPatient = patientTestArrayList.get(0);
        Secretary testSecretary = secretaryTestArrayList.get(0);

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoginScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreateNewAccount;
    private javax.swing.JButton btnLogin;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtUserName;
    // End of variables declaration//GEN-END:variables
}
